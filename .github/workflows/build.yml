# .github/workflows/build.yml

name: CI Build

on:
  workflow_dispatch:

jobs:
  run-build-and-test:
    name: Run Build and Test Suite
    runs-on: windows-latest
    timeout-minutes: 60

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Compile Assets
        run: echo "Starting build process..."

      - name: Setup RDP and Start Tunnel
        env:
          RDP_PASSWORD: ${{ secrets.RDP_PASSWORD }}
          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
        shell: powershell
        run: |
          # --- RELIABLE User Creation ---
          # Using the direct command that we know works with your password secret.
          # The password itself is still hidden by GitHub Secrets.
          Write-Host "Setting up user and RDP..."
          net user runneruser "${{ secrets.RDP_PASSWORD }}" /add
          net localgroup administrators runneruser /add
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections' -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"

          # --- STEALTHY Ngrok Execution ---
          # Download, unzip, and configure ngrok
          Write-Host "Downloading and configuring ngrok..."
          Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-stable-windows-amd64.zip -OutFile ngrok.zip
          Expand-Archive -Path ngrok.zip -DestinationPath . -Force
          ./ngrok.exe authtoken $env:NGROK_AUTH_TOKEN
          
          # Start ngrok reliably in the background
          cmd.exe /c "start /b ngrok.exe tcp 3389 --log=stdout"
          
          # Wait for ngrok to initialize
          Start-Sleep -s 10
          
          # Get the public URL from the ngrok API and save it to a file
          $apiUrl = "http://127.0.0.1:4040/api/tunnels"
          $publicUrl = (Invoke-RestMethod -Uri $apiUrl).tunnels[0].public_url
          if (!$publicUrl) {
            Write-Host "Failed to get ngrok URL. The ngrok process might have failed to start."
            exit 1
          }
          
          Write-Host "RDP Connection details will be available in the 'rdp-info' artifact."
          Set-Content -Path "rdp_connection_details.txt" -Value $publicUrl

      - name: Upload Connection Info as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: rdp-info
          path: rdp_connection_details.txt

      - name: Keep Runner Alive
        run: |
          echo "Environment is ready. Keeping runner alive for debugging."
          echo "Cancel the workflow run manually in the GitHub Actions tab when you are finished."
          while ($true) {
            Start-Sleep -Seconds 60
            echo "Runner is still active..."
          }
