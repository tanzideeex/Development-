name: Secure RDP via SSH Tunnel

on:
  workflow_dispatch:

jobs:
  rdp-debug-session:
    name: Start RDP Debug Session
    runs-on: windows-latest
    timeout-minutes: 25

    steps:
      - name: Configure RDP Service
        env:
          RDP_PASSWORD: ${{ secrets.RDP_PASSWORD }}
        shell: powershell
        run: |
          Write-Host "Configuring RDP user and enabling service..."
          $password = $env:RDP_PASSWORD
          if (-not $password) { Write-Error "The RDP_PASSWORD secret is not set."; exit 1 }
          net user runneruser $password /add
          net localgroup administrators runneruser /add
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections' -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          Write-Host "✅ RDP service is ready."

      - name: Create Secure Tunnel with SSH
        id: tunnel
        shell: powershell
        run: |
          # --- THE FIX IS HERE ---
          # We add "-o StrictHostKeyChecking=no" to automatically accept the server's key fingerprint.
          # This prevents the command from getting stuck asking for user input.
          $sshArguments = "-o StrictHostKeyChecking=no -R 80:localhost:3389 serveo.net"
          
          Write-Host "Starting SSH tunnel with command: ssh $sshArguments"
          $sshProcess = Start-Process ssh -ArgumentList $sshArguments -NoNewWindow -PassThru -RedirectStandardError "ssh-output.txt"
          
          # Wait a few seconds for the connection to be established
          Start-Sleep -s 10
          
          # Read the output file to find the connection URL
          $output = Get-Content -Path ssh-output.txt -Raw
          $match = $output | Select-String -Pattern "Forwarding SSH remote port \d+ to localhost:3389"
          
          if ($match) {
              $line = $match.Lines[0]
              $port = ($line -split ' ')[4]
              $publicUrl = "serveo.net:$port"
              Write-Host "RDP Connection Address: $publicUrl" -ForegroundColor Green
              
              # Save details for the artifact and set as an output parameter
              $connectionInfo = "RDP Address: $publicUrl `nUsername: runneruser`nPassword: (your secret password)"
              Set-Content -Path "connection-details.txt" -Value $connectionInfo
              echo "url=$publicUrl" >> $env:GITHUB_OUTPUT
          } else {
              # Improved error reporting
              Write-Error "Could not establish SSH tunnel or parse the URL. The output from SSH was:"
              Write-Host "--- SSH OUTPUT START ---"
              Write-Host $output
              Write-Host "--- SSH OUTPUT END ---"
              Stop-Process -Id $sshProcess.Id -Force
              exit 1
          }

      - name: Upload Connection Info
        uses: actions/upload-artifact@v4
        with:
          name: rdp-connection-info
          path: connection-details.txt
      
      - name: Wait for Debug Session to End
        run: |
          echo ""
          echo "✅ RDP session is now ACTIVE via the SSH tunnel."
          echo "Connect to: ${{ steps.tunnel.outputs.url }}"
          echo "This session will automatically end in 20 minutes."
          Start-Sleep -Seconds 1200 # 20 minute timer
          echo "Timer expired. Closing session."
